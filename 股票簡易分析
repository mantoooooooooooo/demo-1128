{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mantoooooooooooo/demo-1128/blob/main/%E8%82%A1%E7%A5%A8%E7%B0%A1%E6%98%93%E5%88%86%E6%9E%90\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Google Colab 股票損益分析程式\n",
        "# 請在Colab中執行此程式\n",
        "\n",
        "# 安裝必要套件\n",
        "!pip install openpyxl -q\n",
        "\n",
        "import pandas as pd\n",
        "from openpyxl import Workbook\n",
        "from openpyxl.styles import Font, PatternFill, Alignment\n",
        "import io\n",
        "from google.colab import files\n",
        "from datetime import datetime\n",
        "\n",
        "def upload_and_analyze():\n",
        "    \"\"\"上傳檔案並分析股票損益\"\"\"\n",
        "\n",
        "    print(\"請選擇您的交易記錄檔案（支援 .csv 或 .txt 格式）\")\n",
        "    print(\"=\" * 50)\n",
        "\n",
        "    # 上傳檔案\n",
        "    uploaded = files.upload()\n",
        "\n",
        "    if not uploaded:\n",
        "        print(\"沒有上傳任何檔案！\")\n",
        "        return\n",
        "\n",
        "    # 獲取上傳的檔案\n",
        "    filename = list(uploaded.keys())[0]\n",
        "    print(f\"\\n成功上傳檔案: {filename}\")\n",
        "\n",
        "    try:\n",
        "        # 讀取檔案內容\n",
        "        file_content = uploaded[filename]\n",
        "\n",
        "        # 嘗試不同的編碼方式讀取\n",
        "        try:\n",
        "            # 先嘗試 UTF-8\n",
        "            content_str = file_content.decode('utf-8')\n",
        "            print(\"使用 UTF-8 編碼讀取\")\n",
        "        except UnicodeDecodeError:\n",
        "            try:\n",
        "                # 再嘗試 Big5\n",
        "                content_str = file_content.decode('big5')\n",
        "                print(\"使用 Big5 編碼讀取\")\n",
        "            except UnicodeDecodeError:\n",
        "                # 最後嘗試 GBK\n",
        "                content_str = file_content.decode('gbk')\n",
        "                print(\"使用 GBK 編碼讀取\")\n",
        "\n",
        "        # 將內容轉換為DataFrame\n",
        "        df = pd.read_csv(io.StringIO(content_str))\n",
        "        print(f\"成功讀取 {len(df)} 筆交易記錄\")\n",
        "\n",
        "        # 顯示檔案基本資訊\n",
        "        print(f\"\\n檔案資訊:\")\n",
        "        print(f\"- 資料筆數: {len(df)}\")\n",
        "        print(f\"- 欄位數量: {len(df.columns)}\")\n",
        "        print(f\"- 欄位名稱: {list(df.columns)}\")\n",
        "\n",
        "        # 顯示前幾筆資料預覽\n",
        "        print(f\"\\n前5筆資料預覽:\")\n",
        "        print(df.head())\n",
        "\n",
        "        return analyze_stock_data(df, filename)\n",
        "\n",
        "    except Exception as e:\n",
        "        print(f\"讀取檔案時發生錯誤: {str(e)}\")\n",
        "        print(\"\\n可能的解決方案:\")\n",
        "        print(\"1. 確認檔案格式是CSV\")\n",
        "        print(\"2. 檢查檔案編碼是否正確\")\n",
        "        print(\"3. 確認檔案內容格式正確\")\n",
        "        return None\n",
        "\n",
        "def analyze_stock_data(df, filename):\n",
        "    \"\"\"分析股票交易數據\"\"\"\n",
        "\n",
        "    try:\n",
        "        # 檢查必要欄位是否存在\n",
        "        required_columns = [\"代號\", \"股票名稱\", \"買賣別\", \"原幣應收付金額\"]\n",
        "        missing_columns = []\n",
        "\n",
        "        # 檢查欄位（允許部分模糊匹配）\n",
        "        column_mapping = {}\n",
        "        for required_col in required_columns:\n",
        "            found = False\n",
        "            for actual_col in df.columns:\n",
        "                if required_col in actual_col or actual_col in required_col:\n",
        "                    column_mapping[required_col] = actual_col\n",
        "                    found = True\n",
        "                    break\n",
        "            if not found:\n",
        "                missing_columns.append(required_col)\n",
        "\n",
        "        if missing_columns:\n",
        "            print(f\"❌ 缺少必要欄位: {missing_columns}\")\n",
        "            print(f\"現有欄位: {list(df.columns)}\")\n",
        "            print(\"\\n請確認您的CSV檔案包含以下欄位：\")\n",
        "            for col in required_columns:\n",
        "                print(f\"- {col}\")\n",
        "            return None\n",
        "\n",
        "        # 使用映射後的欄位名稱\n",
        "        for required_col, actual_col in column_mapping.items():\n",
        "            if required_col != actual_col:\n",
        "                df = df.rename(columns={actual_col: required_col})\n",
        "                print(f\"欄位映射: '{actual_col}' → '{required_col}'\")\n",
        "\n",
        "        print(\"\\n✅ 開始進行損益分析...\")\n",
        "\n",
        "        # 數據清理：處理金額欄位\n",
        "        amount_columns = [\"原幣應收付金額\", \"成交金額\"]\n",
        "\n",
        "        for col in amount_columns:\n",
        "            if col in df.columns:\n",
        "                # 移除逗號並轉換為數值\n",
        "                df[col] = df[col].astype(str).str.replace(',', '').str.replace('$', '')\n",
        "                df[col] = pd.to_numeric(df[col], errors='coerce')\n",
        "                print(f\"✅ 已清理欄位: {col}\")\n",
        "\n",
        "        # 計算單檔股票損益\n",
        "        print(\"📊 正在計算個股損益...\")\n",
        "\n",
        "        realized_pnl = df.groupby([\"代號\", \"股票名稱\", \"買賣別\"])[\"原幣應收付金額\"].sum().unstack(fill_value=0)\n",
        "\n",
        "        # 確保欄位存在\n",
        "        for col in [\"買進\", \"賣出\"]:\n",
        "            if col not in realized_pnl.columns:\n",
        "                realized_pnl[col] = 0\n",
        "\n",
        "        # 計算已實現損益\n",
        "        realized_pnl[\"已實現損益\"] = realized_pnl[\"賣出\"] + realized_pnl[\"買進\"]\n",
        "\n",
        "        # 計算投資成本（買進的絕對值）\n",
        "        realized_pnl[\"投資成本\"] = abs(realized_pnl[\"買進\"])\n",
        "\n",
        "        # 計算報酬率\n",
        "        realized_pnl[\"報酬率(%)\"] = (realized_pnl[\"已實現損益\"] / realized_pnl[\"投資成本\"] * 100).round(2)\n",
        "        realized_pnl[\"報酬率(%)\"] = realized_pnl[\"報酬率(%)\"].replace([float('inf'), -float('inf')], 0)\n",
        "\n",
        "        realized_pnl = realized_pnl.reset_index()\n",
        "\n",
        "        # 依已實現損益排序\n",
        "        realized_pnl = realized_pnl.sort_values(by=\"已實現損益\", ascending=False).reset_index(drop=True)\n",
        "        realized_pnl.insert(0, \"排名\", realized_pnl.index + 1)\n",
        "\n",
        "        # 統計分析\n",
        "        winning_stocks = len(realized_pnl[realized_pnl[\"已實現損益\"] > 0])\n",
        "        total_stocks = len(realized_pnl)\n",
        "        win_rate = (winning_stocks / total_stocks * 100) if total_stocks > 0 else 0\n",
        "\n",
        "        # 整體組合總結\n",
        "        total_summary = {\n",
        "            \"總投資成本\": abs(realized_pnl[\"買進\"].sum()),\n",
        "            \"總賣出金額\": realized_pnl[\"賣出\"].sum(),\n",
        "            \"總已實現損益\": realized_pnl[\"已實現損益\"].sum(),\n",
        "            \"整體報酬率(%)\": (realized_pnl[\"已實現損益\"].sum() / abs(realized_pnl[\"買進\"].sum()) * 100).round(2) if realized_pnl[\"買進\"].sum() != 0 else 0,\n",
        "            \"交易股票數量\": total_stocks,\n",
        "            \"獲利股票數量\": winning_stocks,\n",
        "            \"虧損股票數量\": total_stocks - winning_stocks,\n",
        "            \"勝率(%)\": round(win_rate, 2)\n",
        "        }\n",
        "\n",
        "        # 顯示分析結果\n",
        "        print(\"\\n\" + \"=\"*60)\n",
        "        print(\"📈 投資組合分析結果\")\n",
        "        print(\"=\"*60)\n",
        "\n",
        "        for key, value in total_summary.items():\n",
        "            if isinstance(value, (int, float)):\n",
        "                if \"%\" in key:\n",
        "                    print(f\"{key:15s}: {value:8.2f}%\")\n",
        "                elif \"數量\" in key:\n",
        "                    print(f\"{key:15s}: {value:8d}\")\n",
        "                else:\n",
        "                    print(f\"{key:15s}: ${value:12,.2f}\")\n",
        "\n",
        "        print(\"\\n🏆 表現最佳前5檔股票:\")\n",
        "        print(\"-\" * 80)\n",
        "        print(f\"{'排名':<4} {'代號':<8} {'股票名稱':<12} {'已實現損益':<12} {'報酬率':<8}\")\n",
        "        print(\"-\" * 80)\n",
        "\n",
        "        for _, row in realized_pnl.head().iterrows():\n",
        "            pnl_str = f\"${row['已實現損益']:,.0f}\"\n",
        "            return_str = f\"{row['報酬率(%)']:.1f}%\"\n",
        "            print(f\"{row['排名']:<4} {row['代號']:<8} {row['股票名稱']:<12} {pnl_str:<12} {return_str:<8}\")\n",
        "\n",
        "        # 建立Excel報表\n",
        "        create_excel_report(realized_pnl, total_summary, df, filename)\n",
        "\n",
        "        return realized_pnl, total_summary\n",
        "\n",
        "    except Exception as e:\n",
        "        print(f\"❌ 分析過程中發生錯誤: {str(e)}\")\n",
        "        print(\"請檢查資料格式是否正確\")\n",
        "        return None\n",
        "\n",
        "def create_excel_report(realized_pnl, total_summary, original_df, filename):\n",
        "    \"\"\"建立並下載Excel報表\"\"\"\n",
        "\n",
        "    print(\"\\n📄 正在生成Excel報表...\")\n",
        "\n",
        "    try:\n",
        "        wb = Workbook()\n",
        "\n",
        "        # 設定樣式\n",
        "        header_font = Font(bold=True, color=\"FFFFFF\")\n",
        "        header_fill = PatternFill(\"solid\", fgColor=\"366092\")\n",
        "        header_alignment = Alignment(horizontal=\"center\")\n",
        "\n",
        "        # 工作表 1: 單檔股票損益\n",
        "        ws1 = wb.active\n",
        "        ws1.title = \"單檔股票損益\"\n",
        "\n",
        "        headers = [\"排名\", \"股票代號\", \"股票名稱\", \"投資成本(USD)\", \"賣出金額(USD)\", \"已實現損益(USD)\", \"報酬率(%)\"]\n",
        "        ws1.append(headers)\n",
        "\n",
        "        # 套用標題樣式\n",
        "        for col_num, header in enumerate(headers, 1):\n",
        "            cell = ws1.cell(row=1, column=col_num)\n",
        "            cell.font = header_font\n",
        "            cell.fill = header_fill\n",
        "            cell.alignment = header_alignment\n",
        "\n",
        "        # 加入數據並設定格式\n",
        "        for _, row in realized_pnl.iterrows():\n",
        "            ws1.append([\n",
        "                row[\"排名\"],\n",
        "                row[\"代號\"],\n",
        "                row[\"股票名稱\"],\n",
        "                abs(row[\"買進\"]),\n",
        "                row[\"賣出\"],\n",
        "                row[\"已實現損益\"],\n",
        "                row[\"報酬率(%)\"]\n",
        "            ])\n",
        "\n",
        "        # 設定損益顏色\n",
        "        for row_num in range(2, len(realized_pnl) + 2):\n",
        "            pnl_cell = ws1.cell(row=row_num, column=6)\n",
        "            return_cell = ws1.cell(row=row_num, column=7)\n",
        "\n",
        "            if pnl_cell.value > 0:\n",
        "                pnl_cell.font = Font(color=\"00AA00\")\n",
        "                return_cell.font = Font(color=\"00AA00\")\n",
        "            elif pnl_cell.value < 0:\n",
        "                pnl_cell.font = Font(color=\"FF0000\")\n",
        "                return_cell.font = Font(color=\"FF0000\")\n",
        "\n",
        "        # 調整欄寬\n",
        "        column_widths = [8, 12, 20, 15, 15, 15, 12]\n",
        "        for i, width in enumerate(column_widths, 1):\n",
        "            ws1.column_dimensions[ws1.cell(row=1, column=i).column_letter].width = width\n",
        "\n",
        "        # 工作表 2: 整體損益總結\n",
        "        ws2 = wb.create_sheet(\"整體損益總結\")\n",
        "        ws2.append([\"項目\", \"數值\"])\n",
        "\n",
        "        # 套用標題樣式\n",
        "        for col_num in range(1, 3):\n",
        "            cell = ws2.cell(row=1, column=col_num)\n",
        "            cell.font = header_font\n",
        "            cell.fill = header_fill\n",
        "            cell.alignment = header_alignment\n",
        "\n",
        "        for k, v in total_summary.items():\n",
        "            ws2.append([k, v])\n",
        "\n",
        "        ws2.column_dimensions['A'].width = 20\n",
        "        ws2.column_dimensions['B'].width = 15\n",
        "\n",
        "        # 儲存到記憶體\n",
        "        output = io.BytesIO()\n",
        "        wb.save(output)\n",
        "        output.seek(0)\n",
        "\n",
        "        # 產生檔案名稱\n",
        "        timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n",
        "        output_filename = f\"股票損益報表_{timestamp}.xlsx\"\n",
        "\n",
        "        # 下載檔案\n",
        "        files.download(output_filename)\n",
        "\n",
        "        # 將內容寫入檔案供下載\n",
        "        with open(output_filename, 'wb') as f:\n",
        "            f.write(output.getvalue())\n",
        "\n",
        "        print(f\"✅ Excel報表已生成: {output_filename}\")\n",
        "        print(\"📥 檔案已自動下載到您的電腦\")\n",
        "\n",
        "    except Exception as e:\n",
        "        print(f\"❌ 生成Excel報表時發生錯誤: {str(e)}\")\n",
        "\n",
        "# 主程式\n",
        "def main():\n",
        "    \"\"\"主程式入口\"\"\"\n",
        "    print(\"🚀 歡迎使用股票損益分析工具 (Google Colab版)\")\n",
        "    print(\"=\"*60)\n",
        "    print(\"📋 使用說明:\")\n",
        "    print(\"1. 執行此程式後會出現檔案上傳對話框\")\n",
        "    print(\"2. 選擇您的交易記錄檔案（.csv 或 .txt）\")\n",
        "    print(\"3. 等待程式分析完成\")\n",
        "    print(\"4. 下載生成的Excel報表\")\n",
        "    print(\"=\"*60)\n",
        "    print()\n",
        "\n",
        "    try:\n",
        "        result = upload_and_analyze()\n",
        "        if result:\n",
        "            print(\"\\n✅ 分析完成！請查看上方的結果和下載的Excel報表。\")\n",
        "        else:\n",
        "            print(\"\\n❌ 分析失敗，請檢查檔案格式和內容。\")\n",
        "    except Exception as e:\n",
        "        print(f\"\\n❌ 程式執行失敗: {str(e)}\")\n",
        "\n",
        "# 執行主程式\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ],
      "metadata": {
        "id": "e_OmwKCds6Ui",
        "outputId": "b579e6ff-3600-44f2-f89f-0a84f20c5cbe",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🚀 歡迎使用股票損益分析工具 (Google Colab版)\n",
            "============================================================\n",
            "📋 使用說明:\n",
            "1. 執行此程式後會出現檔案上傳對話框\n",
            "2. 選擇您的交易記錄檔案（.csv 或 .txt）\n",
            "3. 等待程式分析完成\n",
            "4. 下載生成的Excel報表\n",
            "============================================================\n",
            "\n",
            "請選擇您的交易記錄檔案（支援 .csv 或 .txt 格式）\n",
            "==================================================\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-ffb82020-2561-4341-b50e-6f600295ad5f\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-ffb82020-2561-4341-b50e-6f600295ad5f\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving 20250920174741.csv to 20250920174741.csv\n",
            "\n",
            "成功上傳檔案: 20250920174741.csv\n",
            "使用 UTF-8 編碼讀取\n",
            "成功讀取 155 筆交易記錄\n",
            "\n",
            "檔案資訊:\n",
            "- 資料筆數: 155\n",
            "- 欄位數量: 14\n",
            "- 欄位名稱: ['代號', '股票名稱', '交易日期', '買賣別', '股數', '交割日期', '市場', '幣別', '成交價', '成交金額', '手續費', '其他費用', '原幣應收付金額', '台幣應收付金額']\n",
            "\n",
            "前5筆資料預覽:\n",
            "     代號                               股票名稱        交易日期 買賣別   股數        交割日期  \\\n",
            "0  OPEN          OPENDOOR TECHNOLOGIES INC  2025/08/29  買進  300  2025/09/02   \n",
            "1  PLTR          Palantir Technologies Inc  2025/08/29  賣出    5  2025/09/03   \n",
            "2  SOFI              SoFi Technologies Inc  2025/08/29  買進    5  2025/09/02   \n",
            "3  WOOF  Petco Health and Wellness Company  2025/08/29  買進  100  2025/09/02   \n",
            "4  WOOF  Petco Health and Wellness Company  2025/08/29  賣出  100  2025/09/03   \n",
            "\n",
            "   市場   幣別       成交價      成交金額   手續費  其他費用    原幣應收付金額  台幣應收付金額  \n",
            "0  美國  USD    4.7899  1,436.97  1.44     0  -1,438.41  -44,094  \n",
            "1  美國  USD  156.7000     783.5  0.78     0     782.72   23,994  \n",
            "2  美國  USD   25.4700    127.35  0.13     0    -127.48   -3,908  \n",
            "3  美國  USD    3.9197    391.97  0.39     0    -392.36  -12,028  \n",
            "4  美國  USD    4.0000       400  0.40     0      399.6   12,250  \n",
            "\n",
            "✅ 開始進行損益分析...\n",
            "✅ 已清理欄位: 原幣應收付金額\n",
            "✅ 已清理欄位: 成交金額\n",
            "📊 正在計算個股損益...\n",
            "\n",
            "============================================================\n",
            "📈 投資組合分析結果\n",
            "============================================================\n",
            "總投資成本          : $   26,538.92\n",
            "總賣出金額          : $   24,367.54\n",
            "總已實現損益         : $   -2,171.38\n",
            "整體報酬率(%)       :    -8.18%\n",
            "交易股票數量         :       24\n",
            "獲利股票數量         :       15\n",
            "虧損股票數量         :        9\n",
            "勝率(%)          :    62.50%\n",
            "\n",
            "🏆 表現最佳前5檔股票:\n",
            "--------------------------------------------------------------------------------\n",
            "排名   代號       股票名稱         已實現損益        報酬率     \n",
            "--------------------------------------------------------------------------------\n",
            "1    TSLA     特斯拉          $2,959       171.5%  \n",
            "2    IONQ     IonQ         $943         155.8%  \n",
            "3    AMD      超微半導體        $408         40.4%   \n",
            "4    PLTR     Palantir Technologies Inc $35          2.1%    \n",
            "5    APLD     Applied Digital Corp $22          5.1%    \n",
            "\n",
            "📄 正在生成Excel報表...\n",
            "❌ 生成Excel報表時發生錯誤: Cannot find file: 股票損益報表_20250921_145134.xlsx\n",
            "\n",
            "✅ 分析完成！請查看上方的結果和下載的Excel報表。\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "name": "歡迎使用 Colab",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}